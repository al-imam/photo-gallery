model User {
  id String @id @default(uuid()) @db.Uuid()

  name     String   @db.VarChar(24)
  profile  Profile?
  role     UserRole @default(PUBLIC)
  username String   @unique() @default(cuid())

  avatar_sm                  String?
  avatar_md                  String?
  avatar_lg                  String?
  avatar_storageRecordId     String?   @unique()
  avatar_storageUrlUpdatedAt DateTime?

  password       String
  email          String   @unique()
  authModifiedAt DateTime @default(now())

  Z_MEDIA         Media[]         @relation("Media")
  Z_REACTIONS     MediaReaction[] @relation("MediaReaction")
  Z_COLLECTIONS   Collection[]    @relation("Collection")
  Z_NOTIFICATIONS Notification[]  @relation("Notification")

  Z_REPORTS                           MediaReport[]        @relation("MediaReport")
  Z_LOG_ROLE                          LOG_RoleChange[]     @relation("LogRoleChange")
  Z_MEDIA_REPORT                      MediaReport[]        @relation("MediaReportModerated")
  Z_LOG_ROLE_MODERATED                LOG_RoleChange[]     @relation("LogRoleChangeModerated")
  Z_MEDIA_UPDATE_REQUEST              MediaUpdateRequest[] @relation("MediaUpdateRequestModerated")
  Z_LOG_MEDIA_STATUS_CHANGE_MODERATED LOG_MediaChange[]    @relation("LogMediaStatusChangeModerated")

  @@index([email])
  @@index([username])
}

model Profile {
  userId    String   @id @db.Uuid()
  createdAt DateTime @default(now())

  bio      String?       @db.VarChar(200)
  location String?       @db.VarChar(48)
  email    String?
  links    ProfileLink[] @relation("ProfileLink")

  Z_USER User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfileLink {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @db.Uuid()
  createdAt DateTime @default(now())

  type ProfileLinkType @default(OTHER)
  url  String          @db.VarChar(48)

  Z_PROFILE Profile @relation("ProfileLink", fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId])
}

model Media {
  id                  String   @id @default(uuid()) @db.Uuid()
  createdAt           DateTime @default(now())
  modifiedAt          DateTime @default(now())
  storageRecordId     String   @unique()
  storageUrlUpdatedAt DateTime

  status        ContentStatus @default(PENDING)
  url_media     String
  url_thumbnail String
  media_size    Int
  media_width   Int
  media_height  Int

  title             String   @db.VarChar(48)
  description       String?  @db.VarChar(200)
  tags              String[] @db.VarChar(16)
  hasGraphicContent Boolean  @default(false)

  authorId String @db.Uuid()
  author   User   @relation("Media", fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String        @db.Uuid()
  category   MediaCategory @relation("MediaCategory", fields: [categoryId], references: [id])

  reactions     MediaReaction[]     @relation("MediaReaction")
  updateRequest MediaUpdateRequest? @relation("PendingMedia")

  Z_COLLECTIONS Collection[]      @relation("Collection")
  Z_LOG_MEDIA   LOG_MediaChange[] @relation("LogMediaStatusChange")
  Z_REPORTS     MediaReport[]     @relation("MediaReport")

  @@index([authorId])
  @@index([categoryId])
}

model MediaUpdateRequest {
  mediaId    String   @id @db.Uuid()
  modifiedAt DateTime @default(now())
  media      Media    @relation("PendingMedia", fields: [mediaId], references: [id], onDelete: Cascade)

  title             String?  @db.VarChar(48)
  description       String?  @db.VarChar(200)
  hasGraphicContent Boolean? @default(false)
  categoryId        String?  @db.Uuid()
  tags              String?

  status       ContentStatus @default(PENDING)
  resolvedById String?       @db.Uuid()
  resolvedBy   User?         @relation("MediaUpdateRequestModerated", fields: [resolvedById], references: [id])
}

model MediaCategory {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  name      String   @unique() @db.VarChar(16)
  media     Media[]  @relation("MediaCategory")

  @@index([name])
}

model MediaReaction {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  mediaId   String   @db.Uuid()
  userId    String   @db.Uuid()

  Z_MEDIA Media @relation("MediaReaction", fields: [mediaId], references: [id], onDelete: Cascade)
  Z_USER  User  @relation("MediaReaction", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mediaId, userId])
}

model MediaReport {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  mediaId   String   @db.Uuid()
  userId    String   @db.Uuid()

  type    MediaReportType
  message String          @db.VarChar(192)

  resolvedById String? @db.Uuid()
  resolvedBy   User?   @relation("MediaReportModerated", fields: [resolvedById], references: [id])

  Z_MEDIA Media @relation("MediaReport", fields: [mediaId], references: [id], onDelete: Cascade)
  Z_USER  User  @relation("MediaReport", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mediaId, userId])
}

model Collection {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  userId    String   @db.Uuid()

  name        String               @db.VarChar(48)
  description String?              @db.VarChar(300)
  visibility  CollectionVisibility @default(PUBLIC)
  media       Media[]              @relation("Collection")

  Z_USER User @relation("Collection", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  userId    String   @db.Uuid()
  message   String   @db.VarChar(128)
  read      Boolean  @default(false)

  Z_USER User @relation("Notification", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LOG_RoleChange {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  comment   String?  @db.VarChar(128)

  role_old UserRole
  role_new UserRole

  userId        String @db.Uuid()
  moderatedById String @db.Uuid()

  Z_USER        User @relation("LogRoleChange", fields: [userId], references: [id], onDelete: Cascade)
  Z_MODERATEDBY User @relation("LogRoleChangeModerated", fields: [moderatedById], references: [id])
}

model LOG_MediaChange {
  id        String   @id @default(uuid()) @db.Uuid()
  mediaId   String   @db.Uuid()
  userId    String   @db.Uuid()
  user      User     @relation("LogMediaStatusChangeModerated", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  message               String?        @db.VarChar(128)
  statusUpdatedTo       ContentStatus?
  isUpdateRequestMerged Boolean?

  Z_MEDIA Media @relation("LogMediaStatusChange", fields: [mediaId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  ADMIN
  MODERATOR
  VERIFIED
  PUBLIC
  BANNED
  DELETED
}

enum ProfileLinkType {
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
  WEBSITE
  OTHER
}

enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CollectionVisibility {
  PUBLIC
  PRIVATE
}

enum MediaReportType {
  IRRELEVANT
  GRAPHIC_CONTENT
  ADULT_CONTENT
  INAPPROPRIATE
  SPAM
  OTHER
}

// Config
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}
