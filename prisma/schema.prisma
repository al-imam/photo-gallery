generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum MediaStatus {
  PENDING
  APPROVED
  REJECTED
  PASSED_TO_ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  name   String
  avatar String?
  role   UserRole @default(USER)

  password          String
  isAccountVerified Boolean @default(false)

  email                  String  @unique
  email_verificationCode String?
  email_pending          String?

  hasBeenBanned     Boolean  @default(false)
  passwordChangedAt DateTime @default(now())

  media          Media[]         @relation("User")
  approved_media Media[]         @relation("Media")
  bookmarks      BookMark[]      @relation("Bookmark")
  notifications  Notification[]  @relation("Notification")
  NONE_REACTIONS MediaReaction[] @relation("MediaReaction")
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  messageId String

  title       String   @default("")
  description String   @default("")
  tags        String[]
  note        String?

  newCategory String?
  categoryId  String?        @db.ObjectId
  category    MediaCategory? @relation("MediaCategory", fields: [categoryId], references: [id])

  media_size   Int
  media_width  Int
  media_height Int

  url_media     String
  url_thumbnail String

  authorId String @db.ObjectId
  author   User   @relation("User", fields: [authorId], references: [id])

  status               MediaStatus @default(PENDING)
  status_moderatedById String?     @db.ObjectId
  status_moderatedBy   User?       @relation("Media", fields: [status_moderatedById], references: [id])
  status_moderatedAt   DateTime?
  status_approvedAt    DateTime?

  NONE_BOOKMARK  BookMark[]      @relation("Bookmark")
  NONE_REACTIONS MediaReaction[] @relation("MediaReaction")
}

model MediaReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  mediaId String @db.ObjectId
  media   Media  @relation("MediaReaction", fields: [mediaId], references: [id])

  userId String @db.ObjectId
  user   User   @relation("MediaReaction", fields: [userId], references: [id])

  @@unique([mediaId, userId])
}

model MediaCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  media     Media[]  @relation("MediaCategory")
}

model BookMark {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  mediaId String @db.ObjectId
  userId  String @db.ObjectId

  NONE_MEDIA Media @relation("Bookmark", fields: [mediaId], references: [id])
  NONE_USER  User  @relation("Bookmark", fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation("Notification", fields: [userId], references: [id])

  message String
  read    Boolean @default(false)
}
