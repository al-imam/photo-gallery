model User {
  id String @id @default(uuid()) @db.Uuid()

  name     String   @db.VarChar(24)
  profile  Profile?
  status   UserRole @default(PUBLIC)
  username String   @unique @default(cuid())

  avatar_sm        String?
  avatar_md        String?
  avatar_lg        String?
  avatar_messageId String?

  password       String
  email          String   @unique
  authModifiedAt DateTime @default(now())

  media         Media[]        @relation("User")
  articles      Article[]      @relation("User")
  bookmarks     BookMark[]     @relation("Bookmark")
  notifications Notification[] @relation("Notification")

  Z_REACTIONS                           MediaReaction[]           @relation("MediaReaction")
  Z_ARTICLE_REACTION                    ArticleReaction[]         @relation("ArticleReaction")
  Z_LOG_ROLE                            LOG_RoleChange[]          @relation("LogRoleChange")
  Z_LOG_ROLE_MODERATED                  LOG_RoleChange[]          @relation("LogRoleChangeModerated")
  Z_LOG_MEDIA_STATUS_CHANGE_MODERATED   LOG_MediaStatusChange[]   @relation("LogMediaStatusChangeModerated")
  Z_LOG_ARTICLE_STATUS_CHANGE_MODERATED LOG_ArticleStatusChange[] @relation("LogArticleStatusChangeModerated")
}

model Profile {
  id        String   @id @db.Uuid()
  createdAt DateTime @default(now())

  bio          String?              @db.VarChar(200)
  location     String?              @db.VarChar(48)
  public_email String?
  social_links ProfileSocialLinks[] @relation("ProfileSocialLinks")

  ZZZ_USER User? @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ProfileSocialLinks {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  profileId String   @db.Uuid()

  type ProfileLinkType @default(OTHER)
  url  String          @db.VarChar(48)

  Profile Profile? @relation("ProfileSocialLinks", fields: [profileId], references: [id])
}

model Media {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  messageId String

  title       String?     @db.VarChar(48)
  description String?     @db.VarChar(300)
  note        String?     @db.VarChar(200)
  tags        String[]    @db.VarChar(16)
  status      ContentStatus @default(PENDING)

  newCategory String?
  categoryId  String?        @db.Uuid()
  category    MediaCategory? @relation("MediaCategory", fields: [categoryId], references: [id])

  media_size              Int
  media_width             Int
  media_height            Int
  media_hasGraphicContent Boolean @default(false)

  url_media     String
  url_thumbnail String

  authorId String @db.Uuid()
  author   User   @relation("User", fields: [authorId], references: [id])

  Z_BOOKMARK  BookMark[]              @relation("Bookmark")
  Z_REACTIONS MediaReaction[]         @relation("MediaReaction")
  Z_LOG_MEDIA LOG_MediaStatusChange[] @relation("LogMediaStatusChange")
}

model MediaCategory {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  name      String   @unique @db.VarChar(16)
  media     Media[]  @relation("MediaCategory")
}

model MediaReaction {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  mediaId   String   @db.Uuid()
  userId    String   @db.Uuid()

  Z_MEDIA Media @relation("MediaReaction", fields: [mediaId], references: [id])
  Z_USER  User  @relation("MediaReaction", fields: [userId], references: [id])

  @@unique([mediaId, userId])
}

model Article {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())

  title String @db.VarChar(96)
  body  String @db.VarChar(100000)

  note   String?     @db.VarChar(200)
  tags   String[]    @db.VarChar(16)
  status ContentStatus @default(PENDING)

  authorId String @db.Uuid()
  author   User   @relation("User", fields: [authorId], references: [id])

  Z_BOOKMARK           BookMark[]                @relation("Bookmark")
  Z_ARTICLE_REACTION   ArticleReaction[]         @relation("ArticleReaction")
  Z_LOG_ARTICLE_STATUS LOG_ArticleStatusChange[] @relation("LogArticleStatusChange")
}

model ArticleReaction {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  articleId String   @db.Uuid()
  userId    String   @db.Uuid()

  Z_USER    User    @relation("ArticleReaction", fields: [userId], references: [id])
  Z_ARTICLE Article @relation("ArticleReaction", fields: [articleId], references: [id])

  @@unique([articleId, userId])
}

model BookMark {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  userId    String   @db.Uuid()

  mediaId   String? @db.Uuid()
  articleId String? @db.Uuid()

  Z_USER    User     @relation("Bookmark", fields: [userId], references: [id])
  Z_MEDIA   Media?   @relation("Bookmark", fields: [mediaId], references: [id])
  Z_ARTICLE Article? @relation("Bookmark", fields: [articleId], references: [id])
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  userId    String   @db.Uuid()
  message   String   @db.VarChar(128)
  read      Boolean  @default(false)

  Z_USER User @relation("Notification", fields: [userId], references: [id])
}

model LOG_RoleChange {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  comment   String?  @db.VarChar(128)

  role_old UserRole
  role_new UserRole

  userId        String @db.Uuid()
  moderatedById String @db.Uuid()

  Z_USER        User @relation("LogRoleChange", fields: [userId], references: [id])
  Z_MODERATEDBY User @relation("LogRoleChangeModerated", fields: [moderatedById], references: [id])
}

model LOG_MediaStatusChange {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  comment   String?  @db.VarChar(128)

  status_old ContentStatus
  status_new ContentStatus

  mediaId       String @db.Uuid()
  moderatedById String @db.Uuid()

  Z_MEDIA       Media @relation("LogMediaStatusChange", fields: [mediaId], references: [id])
  Z_MODERATEDBY User  @relation("LogMediaStatusChangeModerated", fields: [moderatedById], references: [id])
}

model LOG_ArticleStatusChange {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now())
  comment   String?  @db.VarChar(128)

  status_old ContentStatus
  status_new ContentStatus

  articleId     String @db.Uuid()
  moderatedById String @db.Uuid()

  Z_ARTICLE      Article @relation("LogArticleStatusChange", fields: [articleId], references: [id])
  Z_MODERATED_BY User    @relation("LogArticleStatusChangeModerated", fields: [moderatedById], references: [id])
}

// Enums
enum UserRole {
  BANNED
  PUBLIC
  VERIFIED
  MODERATOR
  ADMIN
}

enum ProfileLinkType {
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
  WEBSITE
  OTHER
}

enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
  PASSED_TO_ADMIN
}

// Config
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}
