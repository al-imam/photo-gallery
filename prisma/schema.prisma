generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum MediaStatus {
  PENDING
  APPROVED
  REJECTED
  PASSED_TO_ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  name   String
  avatar String?
  role   UserRole @default(USER)

  password          String
  isAccountVerified Boolean @default(false)

  email                  String  @unique
  email_verificationCode String?
  email_pending          String?

  media          Media[]        @relation("User")
  approved_media Media[]        @relation("ModeratedByUser")
  bookmarks      BookMark[]     @relation("BookmarkUser")
  notifications  Notification[] @relation("NotificationUser")

  hasBeenBanned     Boolean  @default(false)
  passwordChangedAt DateTime @default(now())
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String
  createdAt DateTime @default(now())

  title       String         @default("")
  description String         @default("")
  tags        String[]
  categoryId  String?        @db.ObjectId
  category    MediaCategory? @relation("MediaCategory", fields: [categoryId], references: [id])

  size          Int
  url_media     String
  url_thumbnail String

  authorId String @db.ObjectId
  author   User   @relation("User", fields: [authorId], references: [id])

  status               MediaStatus @default(PENDING)
  status_moderatedById String?     @db.ObjectId
  status_moderatedBy   User?       @relation("ModeratedByUser", fields: [status_moderatedById], references: [id])
  status_approvedAt    DateTime?

  NONE_BOOKMARK BookMark[] @relation("BookmarkMedia")
}

model MediaCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  media     Media[]  @relation("MediaCategory")
}

model BookMark {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  mediaId String @db.ObjectId
  media   Media  @relation("BookmarkMedia", fields: [mediaId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation("BookmarkUser", fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation("NotificationUser", fields: [userId], references: [id])

  message String
  read    Boolean @default(false)
}
